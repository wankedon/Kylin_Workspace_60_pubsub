// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhIQAcquire.proto
#ifndef GRPC_node_2fzczh_2fZhIQAcquire_2eproto__INCLUDED
#define GRPC_node_2fzczh_2fZhIQAcquire_2eproto__INCLUDED

#include "node/zczh/ZhIQAcquire.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIQAcquire {

// IQ获取API
class ZhIQAcquireService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.node.zczh.zhIQAcquire.ZhIQAcquireService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // realtime
    virtual ::grpc::Status RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>> GetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(GetRealtimeResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>> AsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(AsyncGetRealtimeResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>> PrepareAsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(PrepareAsyncGetRealtimeResultRaw(context, request, cq));
    }
    virtual ::grpc::Status RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRealtimeStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRealtimeStopRaw(context, request, cq));
    }
    virtual ::grpc::Status RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRecordStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStartRaw(context, request, cq));
    }
    virtual ::grpc::Status RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRecordStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStopRaw(context, request, cq));
    }
    // replay
    virtual ::grpc::Status ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>> ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>>(ReplayRecordQueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>> AsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>>(AsyncReplayRecordQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>> PrepareAsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>>(PrepareAsyncReplayRecordQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>> GetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(GetReplayResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>> AsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(AsyncGetReplayResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>> PrepareAsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(PrepareAsyncGetReplayResultRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayTaskStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayTaskStopRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // realtime
      virtual void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIQAcquire::Result>* reactor) = 0;
      virtual void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // replay
      virtual void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* reactor) = 0;
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIQAcquire::Result>* reactor) = 0;
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>* GetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>* AsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>* PrepareAsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* ReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>* GetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>* AsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIQAcquire::Result>* PrepareAsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>> GetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(GetRealtimeResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>> AsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(AsyncGetRealtimeResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>> PrepareAsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(PrepareAsyncGetRealtimeResultRaw(context, request, cq));
    }
    ::grpc::Status RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRealtimeStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRealtimeStopRaw(context, request, cq));
    }
    ::grpc::Status RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRecordStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStartRaw(context, request, cq));
    }
    ::grpc::Status RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRecordStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStopRaw(context, request, cq));
    }
    ::grpc::Status ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>> ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>>(ReplayRecordQueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>> AsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>>(AsyncReplayRecordQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>> PrepareAsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>>(PrepareAsyncReplayRecordQueryRaw(context, request, cq));
    }
    ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>> GetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(GetReplayResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>> AsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(AsyncGetReplayResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>> PrepareAsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>>(PrepareAsyncGetReplayResultRaw(context, request, cq));
    }
    ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    ::grpc::Status ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayTaskStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayTaskStopRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIQAcquire::Result>* reactor) override;
      void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* reactor) override;
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIQAcquire::Result>* reactor) override;
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>* GetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>* AsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>* PrepareAsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* ReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>* GetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>* AsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIQAcquire::Result>* PrepareAsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RealtimeStart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRealtimeResult_;
    const ::grpc::internal::RpcMethod rpcmethod_RealtimeStop_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordStart_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayTaskStart_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayRecordQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReplayResult_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayAdjust_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayTaskStop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // realtime
    virtual ::grpc::Status RealtimeStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status GetRealtimeResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* writer);
    virtual ::grpc::Status RealtimeStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status RecordStart(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status RecordStop(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response);
    // replay
    virtual ::grpc::Status ReplayTaskStart(::grpc::ServerContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* writer);
    virtual ::grpc::Status ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status GetReplayResult(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* writer);
    virtual ::grpc::Status ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ReplayTaskStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeResult(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStop(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordStart() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStart(::grpc::ServerContext* context, ::zb::dcts::node::TaskAccount* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordStop() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStop(::grpc::ServerContext* context, ::zb::dcts::node::TaskAccount* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStart(::grpc::ServerContext* context, ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayRecordQuery(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStart() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplayResult(::grpc::ServerContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStop() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::zb::dcts::node::replay::AdjustRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStop(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RealtimeStart<WithAsyncMethod_GetRealtimeResult<WithAsyncMethod_RealtimeStop<WithAsyncMethod_RecordStart<WithAsyncMethod_RecordStop<WithAsyncMethod_ReplayTaskStart<WithAsyncMethod_ReplayRecordQuery<WithAsyncMethod_ReplayStart<WithAsyncMethod_GetReplayResult<WithAsyncMethod_ReplayStop<WithAsyncMethod_ReplayAdjust<WithAsyncMethod_ReplayTaskStop<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest, ::zb::dcts::node::TaskAccount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->RealtimeStart(context, request, response); }));}
    void SetMessageAllocatorFor_RealtimeStart(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest, ::zb::dcts::node::TaskAccount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RealtimeStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIQAcquire::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request) { return this->GetRealtimeResult(context, request); }));
    }
    ~WithCallbackMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhIQAcquire::Result>* GetRealtimeResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) { return this->RealtimeStop(context, request, response); }));}
    void SetMessageAllocatorFor_RealtimeStop(
        ::grpc::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RealtimeStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordStart() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) { return this->RecordStart(context, request, response); }));}
    void SetMessageAllocatorFor_RecordStart(
        ::grpc::MessageAllocator< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordStop() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) { return this->RecordStop(context, request, response); }));}
    void SetMessageAllocatorFor_RecordStop(
        ::grpc::MessageAllocator< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->ReplayTaskStart(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayTaskStart(
        ::grpc::MessageAllocator< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest, ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* request) { return this->ReplayRecordQuery(context, request); }));
    }
    ~WithCallbackMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* ReplayRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayStart() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayStart(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStart(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhIQAcquire::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::ReplayId* request) { return this->GetReplayResult(context, request); }));
    }
    ~WithCallbackMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhIQAcquire::Result>* GetReplayResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayStop() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayStop(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStop(
        ::grpc::MessageAllocator< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayAdjust(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayAdjust(
        ::grpc::MessageAllocator< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayTaskStop(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayTaskStop(
        ::grpc::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RealtimeStart<WithCallbackMethod_GetRealtimeResult<WithCallbackMethod_RealtimeStop<WithCallbackMethod_RecordStart<WithCallbackMethod_RecordStop<WithCallbackMethod_ReplayTaskStart<WithCallbackMethod_ReplayRecordQuery<WithCallbackMethod_ReplayStart<WithCallbackMethod_GetReplayResult<WithCallbackMethod_ReplayStop<WithCallbackMethod_ReplayAdjust<WithCallbackMethod_ReplayTaskStop<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordStart() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordStop() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStart() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStop() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordStart() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordStop() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayRecordQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStart() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplayResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStop() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RealtimeStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RealtimeStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetRealtimeResult(context, request); }));
    }
    ~WithRawCallbackMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRealtimeResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RealtimeStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RealtimeStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordStart() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordStop() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayTaskStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReplayRecordQuery(context, request); }));
    }
    ~WithRawCallbackMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReplayRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayStart() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetReplayResult(context, request); }));
    }
    ~WithRawCallbackMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetReplayResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayStop() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayAdjust(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayTaskStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedRealtimeStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRealtimeStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRealtimeStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRealtimeStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordStart() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRecordStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::TaskAccount,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordStop() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRecordStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::TaskAccount,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedReplayTaskStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayTaskStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::CreateReplayTaskRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStart() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStop() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::ReplayId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayAdjust(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayAdjust(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::AdjustRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayTaskStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayTaskStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RealtimeStart<WithStreamedUnaryMethod_RealtimeStop<WithStreamedUnaryMethod_RecordStart<WithStreamedUnaryMethod_RecordStop<WithStreamedUnaryMethod_ReplayTaskStart<WithStreamedUnaryMethod_ReplayStart<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<WithStreamedUnaryMethod_ReplayTaskStop<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIQAcquire::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIQAcquire::Result>* streamer) {
                       return this->StreamedGetRealtimeResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRealtimeResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhIQAcquire::Result>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest, ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest, ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* streamer) {
                       return this->StreamedReplayRecordQuery(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReplayRecordQuery(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest,::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhIQAcquire::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhIQAcquire::Result>* streamer) {
                       return this->StreamedGetReplayResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIQAcquire::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetReplayResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::node::replay::ReplayId,::zb::dcts::node::zczh::zhIQAcquire::Result>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetRealtimeResult<WithSplitStreamingMethod_ReplayRecordQuery<WithSplitStreamingMethod_GetReplayResult<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RealtimeStart<WithSplitStreamingMethod_GetRealtimeResult<WithStreamedUnaryMethod_RealtimeStop<WithStreamedUnaryMethod_RecordStart<WithStreamedUnaryMethod_RecordStop<WithStreamedUnaryMethod_ReplayTaskStart<WithSplitStreamingMethod_ReplayRecordQuery<WithStreamedUnaryMethod_ReplayStart<WithSplitStreamingMethod_GetReplayResult<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<WithStreamedUnaryMethod_ReplayTaskStop<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace zhIQAcquire
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_node_2fzczh_2fZhIQAcquire_2eproto__INCLUDED
