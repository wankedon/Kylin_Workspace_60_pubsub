// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhDirection.proto
#ifndef GRPC_node_2fzczh_2fZhDirection_2eproto__INCLUDED
#define GRPC_node_2fzczh_2fZhDirection_2eproto__INCLUDED

#include "node/zczh/ZhDirection.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhdirection {

class ZhDirectionService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.node.zczh.zhdirection.ZhDirectionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 测向 实时
    virtual ::grpc::Status StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncStartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncStartDirectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncStartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncStartDirectionRaw(context, request, cq));
    }
    virtual ::grpc::Status StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncStopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncStopDirectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncStopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncStopDirectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>> GetDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>>(GetDirectionResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>> AsyncGetDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>>(AsyncGetDirectionResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>> PrepareAsyncGetDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>>(PrepareAsyncGetDirectionResultRaw(context, request, cq));
    }
    virtual ::grpc::Status RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRecordStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStartRaw(context, request, cq));
    }
    virtual ::grpc::Status RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRecordStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStopRaw(context, request, cq));
    }
    // 通用
    virtual ::grpc::Status DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldResetRaw(context, request, cq));
    }
    virtual ::grpc::Status DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldCloseRaw(context, request, cq));
    }
    // 定位
    virtual ::grpc::Status StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosTaskId>> AsyncStartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosTaskId>>(AsyncStartPosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosTaskId>> PrepareAsyncStartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosTaskId>>(PrepareAsyncStartPosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>> GetPosResult(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>>(GetPosResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>> AsyncGetPosResult(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>>(AsyncGetPosResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>> PrepareAsyncGetPosResult(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>>(PrepareAsyncGetPosResultRaw(context, request, cq));
    }
    virtual ::grpc::Status StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncStopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncStopPosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncStopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncStopPosRaw(context, request, cq));
    }
    // 测向回放
    virtual ::grpc::Status DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::RecordReply>> AsyncDirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::RecordReply>>(AsyncDirectRecordQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::RecordReply>> PrepareAsyncDirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::RecordReply>>(PrepareAsyncDirectRecordQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>> GetReplayDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>>(GetReplayDirectionResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>> AsyncGetReplayDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>>(AsyncGetReplayDirectionResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>> PrepareAsyncGetReplayDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>>(PrepareAsyncGetReplayDirectionResultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 测向 实时
      virtual void StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::Result>* reactor) = 0;
      virtual void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 通用
      virtual void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 定位
      virtual void StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPosResult(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::PosResult>* reactor) = 0;
      virtual void StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 测向回放
      virtual void DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetReplayDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::Result>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncStartDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncStartDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncStopDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncStopDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>* GetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>* AsyncGetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>* PrepareAsyncGetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosTaskId>* AsyncStartPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosTaskId>* PrepareAsyncStartPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>* GetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>* AsyncGetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::PosResult>* PrepareAsyncGetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncStopPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncStopPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::RecordReply>* AsyncDirectRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhdirection::RecordReply>* PrepareAsyncDirectRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>* GetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>* AsyncGetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhdirection::Result>* PrepareAsyncGetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncStartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncStartDirectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncStartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncStartDirectionRaw(context, request, cq));
    }
    ::grpc::Status StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncStopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncStopDirectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncStopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncStopDirectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::Result>> GetDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::Result>>(GetDirectionResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>> AsyncGetDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>>(AsyncGetDirectionResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>> PrepareAsyncGetDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>>(PrepareAsyncGetDirectionResultRaw(context, request, cq));
    }
    ::grpc::Status RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRecordStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStartRaw(context, request, cq));
    }
    ::grpc::Status RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRecordStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStopRaw(context, request, cq));
    }
    ::grpc::Status DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldOpenRaw(context, request, cq));
    }
    ::grpc::Status DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldResetRaw(context, request, cq));
    }
    ::grpc::Status DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldCloseRaw(context, request, cq));
    }
    ::grpc::Status StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::PosTaskId>> AsyncStartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::PosTaskId>>(AsyncStartPosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::PosTaskId>> PrepareAsyncStartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::PosTaskId>>(PrepareAsyncStartPosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::PosResult>> GetPosResult(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::PosResult>>(GetPosResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::PosResult>> AsyncGetPosResult(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::PosResult>>(AsyncGetPosResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::PosResult>> PrepareAsyncGetPosResult(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::PosResult>>(PrepareAsyncGetPosResultRaw(context, request, cq));
    }
    ::grpc::Status StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncStopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncStopPosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncStopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncStopPosRaw(context, request, cq));
    }
    ::grpc::Status DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::RecordReply>> AsyncDirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::RecordReply>>(AsyncDirectRecordQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::RecordReply>> PrepareAsyncDirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::RecordReply>>(PrepareAsyncDirectRecordQueryRaw(context, request, cq));
    }
    ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::Result>> GetReplayDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::Result>>(GetReplayDirectionResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>> AsyncGetReplayDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>>(AsyncGetReplayDirectionResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>> PrepareAsyncGetReplayDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>>(PrepareAsyncGetReplayDirectionResultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      void StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::Result>* reactor) override;
      void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response, std::function<void(::grpc::Status)>) override;
      void StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPosResult(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::PosResult>* reactor) override;
      void StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response, std::function<void(::grpc::Status)>) override;
      void DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetReplayDirectionResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::Result>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncStartDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncStartDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncStopDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncStopDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::Result>* GetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>* AsyncGetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>* PrepareAsyncGetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::PosTaskId>* AsyncStartPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::PosTaskId>* PrepareAsyncStartPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::PosResult>* GetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::PosResult>* AsyncGetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::PosResult>* PrepareAsyncGetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncStopPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncStopPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::RecordReply>* AsyncDirectRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::RecordReply>* PrepareAsyncDirectRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::Result>* GetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>* AsyncGetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>* PrepareAsyncGetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartDirection_;
    const ::grpc::internal::RpcMethod rpcmethod_StopDirection_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDirectionResult_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordStart_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordStop_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldReset_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldClose_;
    const ::grpc::internal::RpcMethod rpcmethod_StartPos_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPosResult_;
    const ::grpc::internal::RpcMethod rpcmethod_StopPos_;
    const ::grpc::internal::RpcMethod rpcmethod_DirectRecordQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStart_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayAdjust_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReplayDirectionResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 测向 实时
    virtual ::grpc::Status StartDirection(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status StopDirection(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status GetDirectionResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* writer);
    virtual ::grpc::Status RecordStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status RecordStop(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response);
    // 通用
    virtual ::grpc::Status DataHoldOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DataHoldReset(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DataHoldClose(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    // 定位
    virtual ::grpc::Status StartPos(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response);
    virtual ::grpc::Status GetPosResult(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* writer);
    virtual ::grpc::Status StopPos(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response);
    // 测向回放
    virtual ::grpc::Status DirectRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response);
    virtual ::grpc::Status ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetReplayDirectionResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartDirection() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartDirection(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopDirection() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopDirection(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDirectionResult() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDirectionResult(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhdirection::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordStart() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordStop() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStop(::grpc::ServerContext* context, ::zb::dcts::node::TaskAccount* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldOpen(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldReset(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldClose(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartPos() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StartPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosRequest* /*request*/, ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartPos(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::zczh::zhdirection::PosTaskId>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPosResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPosResult() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetPosResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosResult(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopPos() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_StopPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopPos(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DirectRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DirectRecordQuery() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DirectRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DirectRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhdirection::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDirectRecordQuery(::grpc::ServerContext* context, ::zb::dcts::TimeSpan* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::zczh::zhdirection::RecordReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStart() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStop() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::zb::dcts::node::replay::AdjustRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReplayDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReplayDirectionResult() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetReplayDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplayDirectionResult(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhdirection::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(15, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartDirection<WithAsyncMethod_StopDirection<WithAsyncMethod_GetDirectionResult<WithAsyncMethod_RecordStart<WithAsyncMethod_RecordStop<WithAsyncMethod_DataHoldOpen<WithAsyncMethod_DataHoldReset<WithAsyncMethod_DataHoldClose<WithAsyncMethod_StartPos<WithAsyncMethod_GetPosResult<WithAsyncMethod_StopPos<WithAsyncMethod_DirectRecordQuery<WithAsyncMethod_ReplayStart<WithAsyncMethod_ReplayStop<WithAsyncMethod_ReplayAdjust<WithAsyncMethod_GetReplayDirectionResult<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartDirection() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::zb::dcts::node::TaskAccount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->StartDirection(context, request, response); }));}
    void SetMessageAllocatorFor_StartDirection(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::zb::dcts::node::TaskAccount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartDirection(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopDirection() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) { return this->StopDirection(context, request, response); }));}
    void SetMessageAllocatorFor_StopDirection(
        ::grpc::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopDirection(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDirectionResult() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhdirection::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request) { return this->GetDirectionResult(context, request); }));
    }
    ~WithCallbackMethod_GetDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhdirection::Result>* GetDirectionResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordStart() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response) { return this->RecordStart(context, request, response); }));}
    void SetMessageAllocatorFor_RecordStart(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordStop() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) { return this->RecordStop(context, request, response); }));}
    void SetMessageAllocatorFor_RecordStop(
        ::grpc::MessageAllocator< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldOpen(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldOpen(
        ::grpc::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldReset(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldReset(
        ::grpc::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldReset(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldClose(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldClose(
        ::grpc::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldClose(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartPos() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::PosRequest, ::zb::dcts::node::zczh::zhdirection::PosTaskId>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response) { return this->StartPos(context, request, response); }));}
    void SetMessageAllocatorFor_StartPos(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhdirection::PosRequest, ::zb::dcts::node::zczh::zhdirection::PosTaskId>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::PosRequest, ::zb::dcts::node::zczh::zhdirection::PosTaskId>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosRequest* /*request*/, ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartPos(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosRequest* /*request*/, ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPosResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPosResult() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::zb::dcts::node::zczh::zhdirection::PosResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request) { return this->GetPosResult(context, request); }));
    }
    ~WithCallbackMethod_GetPosResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhdirection::PosResult>* GetPosResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopPos() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response) { return this->StopPos(context, request, response); }));}
    void SetMessageAllocatorFor_StopPos(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopPos(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DirectRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DirectRecordQuery() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhdirection::RecordReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response) { return this->DirectRecordQuery(context, request, response); }));}
    void SetMessageAllocatorFor_DirectRecordQuery(
        ::grpc::MessageAllocator< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhdirection::RecordReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhdirection::RecordReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DirectRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DirectRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhdirection::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DirectRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhdirection::RecordReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayStart() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::zb::dcts::node::TaskAccount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->ReplayStart(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStart(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::zb::dcts::node::TaskAccount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayStop() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response) { return this->ReplayStop(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStop(
        ::grpc::MessageAllocator< ::zb::dcts::TaskId, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response) { return this->ReplayAdjust(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayAdjust(
        ::grpc::MessageAllocator< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetReplayDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetReplayDirectionResult() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhdirection::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request) { return this->GetReplayDirectionResult(context, request); }));
    }
    ~WithCallbackMethod_GetReplayDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhdirection::Result>* GetReplayDirectionResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartDirection<WithCallbackMethod_StopDirection<WithCallbackMethod_GetDirectionResult<WithCallbackMethod_RecordStart<WithCallbackMethod_RecordStop<WithCallbackMethod_DataHoldOpen<WithCallbackMethod_DataHoldReset<WithCallbackMethod_DataHoldClose<WithCallbackMethod_StartPos<WithCallbackMethod_GetPosResult<WithCallbackMethod_StopPos<WithCallbackMethod_DirectRecordQuery<WithCallbackMethod_ReplayStart<WithCallbackMethod_ReplayStop<WithCallbackMethod_ReplayAdjust<WithCallbackMethod_GetReplayDirectionResult<Service > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartDirection() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopDirection() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDirectionResult() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordStart() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordStop() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartPos() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StartPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosRequest* /*request*/, ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPosResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPosResult() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetPosResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopPos() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_StopPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DirectRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DirectRecordQuery() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DirectRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DirectRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhdirection::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStart() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStop() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReplayDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReplayDirectionResult() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetReplayDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartDirection() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartDirection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopDirection() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopDirection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDirectionResult() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDirectionResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordStart() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordStop() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartPos() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_StartPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosRequest* /*request*/, ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartPos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPosResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPosResult() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetPosResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopPos() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_StopPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopPos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DirectRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DirectRecordQuery() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_DirectRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DirectRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhdirection::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDirectRecordQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStart() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStop() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReplayDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReplayDirectionResult() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetReplayDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplayDirectionResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(15, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartDirection() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartDirection(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartDirection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopDirection() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopDirection(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopDirection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDirectionResult() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetDirectionResult(context, request); }));
    }
    ~WithRawCallbackMethod_GetDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetDirectionResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordStart() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordStop() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldOpen(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldReset(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldClose(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartPos() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartPos(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosRequest* /*request*/, ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartPos(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPosResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPosResult() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetPosResult(context, request); }));
    }
    ~WithRawCallbackMethod_GetPosResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetPosResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopPos() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopPos(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopPos(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DirectRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DirectRecordQuery() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DirectRecordQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_DirectRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DirectRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhdirection::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DirectRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayStart() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayStop() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayAdjust(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetReplayDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetReplayDirectionResult() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetReplayDirectionResult(context, request); }));
    }
    ~WithRawCallbackMethod_GetReplayDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetReplayDirectionResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartDirection() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedStartDirection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartDirection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhdirection::DirectionRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopDirection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopDirection() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedStopDirection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopDirection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopDirection(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopDirection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordStart() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRecordStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhdirection::RecordRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordStop() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRecordStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::TaskAccount,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartPos() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhdirection::PosRequest, ::zb::dcts::node::zczh::zhdirection::PosTaskId>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhdirection::PosRequest, ::zb::dcts::node::zczh::zhdirection::PosTaskId>* streamer) {
                       return this->StreamedStartPos(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosRequest* /*request*/, ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartPos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhdirection::PosRequest,::zb::dcts::node::zczh::zhdirection::PosTaskId>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopPos() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedStopPos(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopPos(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopPos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhdirection::PosTaskId,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DirectRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DirectRecordQuery() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhdirection::RecordReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhdirection::RecordReply>* streamer) {
                       return this->StreamedDirectRecordQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DirectRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DirectRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhdirection::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDirectRecordQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TimeSpan,::zb::dcts::node::zczh::zhdirection::RecordReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStart() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedReplayStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStop() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedReplayStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedReplayAdjust(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayAdjust(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::AdjustRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartDirection<WithStreamedUnaryMethod_StopDirection<WithStreamedUnaryMethod_RecordStart<WithStreamedUnaryMethod_RecordStop<WithStreamedUnaryMethod_DataHoldOpen<WithStreamedUnaryMethod_DataHoldReset<WithStreamedUnaryMethod_DataHoldClose<WithStreamedUnaryMethod_StartPos<WithStreamedUnaryMethod_StopPos<WithStreamedUnaryMethod_DirectRecordQuery<WithStreamedUnaryMethod_ReplayStart<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<Service > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetDirectionResult() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhdirection::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhdirection::Result>* streamer) {
                       return this->StreamedGetDirectionResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDirectionResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhdirection::Result>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPosResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetPosResult() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::zb::dcts::node::zczh::zhdirection::PosResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::zb::dcts::node::zczh::zhdirection::PosResult>* streamer) {
                       return this->StreamedGetPosResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetPosResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPosResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPosResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::node::zczh::zhdirection::PosTaskId,::zb::dcts::node::zczh::zhdirection::PosResult>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetReplayDirectionResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetReplayDirectionResult() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhdirection::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhdirection::Result>* streamer) {
                       return this->StreamedGetReplayDirectionResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetReplayDirectionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReplayDirectionResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetReplayDirectionResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhdirection::Result>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetDirectionResult<WithSplitStreamingMethod_GetPosResult<WithSplitStreamingMethod_GetReplayDirectionResult<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartDirection<WithStreamedUnaryMethod_StopDirection<WithSplitStreamingMethod_GetDirectionResult<WithStreamedUnaryMethod_RecordStart<WithStreamedUnaryMethod_RecordStop<WithStreamedUnaryMethod_DataHoldOpen<WithStreamedUnaryMethod_DataHoldReset<WithStreamedUnaryMethod_DataHoldClose<WithStreamedUnaryMethod_StartPos<WithSplitStreamingMethod_GetPosResult<WithStreamedUnaryMethod_StopPos<WithStreamedUnaryMethod_DirectRecordQuery<WithStreamedUnaryMethod_ReplayStart<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<WithSplitStreamingMethod_GetReplayDirectionResult<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace zhdirection
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_node_2fzczh_2fZhDirection_2eproto__INCLUDED
