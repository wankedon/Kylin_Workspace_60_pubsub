// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhIFAnalysis.proto
#ifndef GRPC_node_2fzczh_2fZhIFAnalysis_2eproto__INCLUDED
#define GRPC_node_2fzczh_2fZhIFAnalysis_2eproto__INCLUDED

#include "node/zczh/ZhIFAnalysis.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIFAnalysis {

class ZhIFAnalysisService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // realtime 
    virtual ::grpc::Status StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncStartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncStartRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncStartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncStartRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> GetRecogniseResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(GetRecogniseResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> AsyncGetRecogniseResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(AsyncGetRecogniseResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> PrepareAsyncGetRecogniseResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(PrepareAsyncGetRecogniseResultRaw(context, request, cq));
    }
    virtual ::grpc::Status StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncStopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncStopRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncStopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncStopRecogniseRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncChangeRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncChangeRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>> GetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>>(GetRealtimeStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>> AsyncGetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>>(AsyncGetRealtimeStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>> PrepareAsyncGetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>>(PrepareAsyncGetRealtimeStatusRaw(context, request, cq));
    }
    // replay
    virtual ::grpc::Status ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>> ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>>(ReplayRecordQueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>> AsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>>(AsyncReplayRecordQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>> PrepareAsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>>(PrepareAsyncReplayRecordQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> GetReplaySpectrumResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(GetReplaySpectrumResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> AsyncGetReplaySpectrumResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(AsyncGetReplaySpectrumResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> PrepareAsyncGetReplaySpectrumResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(PrepareAsyncGetReplaySpectrumResultRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayTaskStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayTaskStopRaw(context, request, cq));
    }
    // 通用操作
    virtual ::grpc::Status ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncZoomInOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncZoomInOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncZoomInCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncZoomInCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldResetRaw(context, request, cq));
    }
    virtual ::grpc::Status DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDetectionOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDetectionOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDetectionCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDetectionCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncSetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncSetSignalDetailKeepingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncSetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncSetSignalDetailKeepingRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // realtime 
      virtual void StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRecogniseResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* reactor) = 0;
      virtual void StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* reactor) = 0;
      // replay
      virtual void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* reactor) = 0;
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetReplaySpectrumResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* reactor) = 0;
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 通用操作
      virtual void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncStartRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncStartRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* GetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* AsyncGetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* PrepareAsyncGetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncStopRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncStopRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncChangeRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncChangeRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* GetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* AsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* PrepareAsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* ReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* GetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* AsyncGetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* PrepareAsyncGetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncStartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncStartRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncStartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncStartRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> GetRecogniseResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(GetRecogniseResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> AsyncGetRecogniseResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(AsyncGetRecogniseResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> PrepareAsyncGetRecogniseResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(PrepareAsyncGetRecogniseResultRaw(context, request, cq));
    }
    ::grpc::Status StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncStopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncStopRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncStopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncStopRecogniseRaw(context, request, cq));
    }
    ::grpc::Status ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncChangeRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncChangeRecogniseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>> GetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>>(GetRealtimeStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>> AsyncGetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>>(AsyncGetRealtimeStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>> PrepareAsyncGetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>>(PrepareAsyncGetRealtimeStatusRaw(context, request, cq));
    }
    ::grpc::Status ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>> ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>>(ReplayRecordQueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>> AsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>>(AsyncReplayRecordQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>> PrepareAsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>>(PrepareAsyncReplayRecordQueryRaw(context, request, cq));
    }
    ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> GetReplaySpectrumResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(GetReplaySpectrumResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> AsyncGetReplaySpectrumResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(AsyncGetReplaySpectrumResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>> PrepareAsyncGetReplaySpectrumResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>>(PrepareAsyncGetReplaySpectrumResultRaw(context, request, cq));
    }
    ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    ::grpc::Status ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayTaskStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayTaskStopRaw(context, request, cq));
    }
    ::grpc::Status ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncZoomInOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncZoomInOpenRaw(context, request, cq));
    }
    ::grpc::Status ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncZoomInCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncZoomInCloseRaw(context, request, cq));
    }
    ::grpc::Status DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldOpenRaw(context, request, cq));
    }
    ::grpc::Status DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldResetRaw(context, request, cq));
    }
    ::grpc::Status DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldCloseRaw(context, request, cq));
    }
    ::grpc::Status DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDetectionOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDetectionOpenRaw(context, request, cq));
    }
    ::grpc::Status DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDetectionCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDetectionCloseRaw(context, request, cq));
    }
    ::grpc::Status SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncSetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncSetSignalDetailKeepingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncSetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncSetSignalDetailKeepingRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      void StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRecogniseResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* reactor) override;
      void StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* reactor) override;
      void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* reactor) override;
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetReplaySpectrumResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* reactor) override;
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncStartRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncStartRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* GetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* AsyncGetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* PrepareAsyncGetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncStopRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncStopRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncChangeRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncChangeRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* GetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* AsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* PrepareAsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* ReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* GetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* AsyncGetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* PrepareAsyncGetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartRecognise_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRecogniseResult_;
    const ::grpc::internal::RpcMethod rpcmethod_StopRecognise_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeRecognise_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRealtimeStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayTaskStart_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayRecordQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReplaySpectrumResult_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayAdjust_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayTaskStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ZoomInOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_ZoomInClose_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldReset_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldClose_;
    const ::grpc::internal::RpcMethod rpcmethod_DetectionOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_DetectionClose_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSignalDetailKeeping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // realtime 
    virtual ::grpc::Status StartRecognise(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status GetRecogniseResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* writer);
    virtual ::grpc::Status StopRecognise(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ChangeRecognise(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* writer);
    // replay
    virtual ::grpc::Status ReplayTaskStart(::grpc::ServerContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* writer);
    virtual ::grpc::Status ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status GetReplaySpectrumResult(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* writer);
    virtual ::grpc::Status ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ReplayTaskStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response);
    // 通用操作
    virtual ::grpc::Status ZoomInOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ZoomInClose(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DataHoldOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DataHoldReset(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DataHoldClose(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DetectionOpen(::grpc::ServerContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DetectionClose(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartRecognise() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartRecognise(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRecogniseResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRecogniseResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRecogniseResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecogniseResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecogniseResult(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopRecognise() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StopRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopRecognise(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeRecognise() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ChangeRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeRecognise(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeStatus(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStart(::grpc::ServerContext* context, ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayRecordQuery(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStart() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReplaySpectrumResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReplaySpectrumResult() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetReplaySpectrumResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplaySpectrumResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplaySpectrumResult(::grpc::ServerContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStop() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::zb::dcts::node::replay::AdjustRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStop(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomInOpen(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::ZoomInRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomInClose(::grpc::ServerContext* context, ::zb::dcts::node::TaskAccount* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldOpen(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldReset(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldClose(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectionOpen(::grpc::ServerContext* context, ::zb::dcts::node::detection::DetectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DetectionClose() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectionClose(::grpc::ServerContext* context, ::zb::dcts::node::TaskAccount* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSignalDetailKeeping(::grpc::ServerContext* context, ::zb::dcts::node::detection::DetailKeepingRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartRecognise<WithAsyncMethod_GetRecogniseResult<WithAsyncMethod_StopRecognise<WithAsyncMethod_ChangeRecognise<WithAsyncMethod_GetRealtimeStatus<WithAsyncMethod_ReplayTaskStart<WithAsyncMethod_ReplayRecordQuery<WithAsyncMethod_ReplayStart<WithAsyncMethod_GetReplaySpectrumResult<WithAsyncMethod_ReplayStop<WithAsyncMethod_ReplayAdjust<WithAsyncMethod_ReplayTaskStop<WithAsyncMethod_ZoomInOpen<WithAsyncMethod_ZoomInClose<WithAsyncMethod_DataHoldOpen<WithAsyncMethod_DataHoldReset<WithAsyncMethod_DataHoldClose<WithAsyncMethod_DetectionOpen<WithAsyncMethod_DetectionClose<WithAsyncMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartRecognise() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::zb::dcts::node::TaskAccount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->StartRecognise(context, request, response); }));}
    void SetMessageAllocatorFor_StartRecognise(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::zb::dcts::node::TaskAccount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartRecognise(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRecogniseResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRecogniseResult() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIFAnalysis::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request) { return this->GetRecogniseResult(context, request); }));
    }
    ~WithCallbackMethod_GetRecogniseResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecogniseResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* GetRecogniseResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopRecognise() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) { return this->StopRecognise(context, request, response); }));}
    void SetMessageAllocatorFor_StopRecognise(
        ::grpc::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopRecognise(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChangeRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChangeRecognise() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ChangeRecognise(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeRecognise(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChangeRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeRecognise(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request) { return this->GetRealtimeStatus(context, request); }));
    }
    ~WithCallbackMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* GetRealtimeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->ReplayTaskStart(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayTaskStart(
        ::grpc::MessageAllocator< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest, ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* request) { return this->ReplayRecordQuery(context, request); }));
    }
    ~WithCallbackMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* ReplayRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayStart() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayStart(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStart(
        ::grpc::MessageAllocator< ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetReplaySpectrumResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetReplaySpectrumResult() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhIFAnalysis::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::ReplayId* request) { return this->GetReplaySpectrumResult(context, request); }));
    }
    ~WithCallbackMethod_GetReplaySpectrumResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplaySpectrumResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* GetReplaySpectrumResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayStop() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayStop(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStop(
        ::grpc::MessageAllocator< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayAdjust(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayAdjust(
        ::grpc::MessageAllocator< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayTaskStop(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayTaskStop(
        ::grpc::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ZoomInOpen(context, request, response); }));}
    void SetMessageAllocatorFor_ZoomInOpen(
        ::grpc::MessageAllocator< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ZoomInOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) { return this->ZoomInClose(context, request, response); }));}
    void SetMessageAllocatorFor_ZoomInClose(
        ::grpc::MessageAllocator< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ZoomInClose(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldOpen(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldOpen(
        ::grpc::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldReset(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldReset(
        ::grpc::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldReset(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldClose(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldClose(
        ::grpc::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldClose(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DetectionOpen(context, request, response); }));}
    void SetMessageAllocatorFor_DetectionOpen(
        ::grpc::MessageAllocator< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DetectionOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DetectionClose() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) { return this->DetectionClose(context, request, response); }));}
    void SetMessageAllocatorFor_DetectionClose(
        ::grpc::MessageAllocator< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DetectionClose(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response) { return this->SetSignalDetailKeeping(context, request, response); }));}
    void SetMessageAllocatorFor_SetSignalDetailKeeping(
        ::grpc::MessageAllocator< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSignalDetailKeeping(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartRecognise<WithCallbackMethod_GetRecogniseResult<WithCallbackMethod_StopRecognise<WithCallbackMethod_ChangeRecognise<WithCallbackMethod_GetRealtimeStatus<WithCallbackMethod_ReplayTaskStart<WithCallbackMethod_ReplayRecordQuery<WithCallbackMethod_ReplayStart<WithCallbackMethod_GetReplaySpectrumResult<WithCallbackMethod_ReplayStop<WithCallbackMethod_ReplayAdjust<WithCallbackMethod_ReplayTaskStop<WithCallbackMethod_ZoomInOpen<WithCallbackMethod_ZoomInClose<WithCallbackMethod_DataHoldOpen<WithCallbackMethod_DataHoldReset<WithCallbackMethod_DataHoldClose<WithCallbackMethod_DetectionOpen<WithCallbackMethod_DetectionClose<WithCallbackMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartRecognise() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRecogniseResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRecogniseResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRecogniseResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecogniseResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopRecognise() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StopRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeRecognise() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ChangeRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStart() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReplaySpectrumResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReplaySpectrumResult() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetReplaySpectrumResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplaySpectrumResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStop() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DetectionClose() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartRecognise() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartRecognise(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRecogniseResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRecogniseResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRecogniseResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecogniseResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecogniseResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopRecognise() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StopRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopRecognise(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeRecognise() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ChangeRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeRecognise(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayRecordQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStart() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReplaySpectrumResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReplaySpectrumResult() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetReplaySpectrumResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplaySpectrumResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplaySpectrumResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStop() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomInOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomInClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectionOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DetectionClose() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectionClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSignalDetailKeeping(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartRecognise() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartRecognise(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartRecognise(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRecogniseResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRecogniseResult() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetRecogniseResult(context, request); }));
    }
    ~WithRawCallbackMethod_GetRecogniseResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecogniseResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRecogniseResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopRecognise() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopRecognise(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopRecognise(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChangeRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChangeRecognise() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeRecognise(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChangeRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeRecognise(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetRealtimeStatus(context, request); }));
    }
    ~WithRawCallbackMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRealtimeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayTaskStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReplayRecordQuery(context, request); }));
    }
    ~WithRawCallbackMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReplayRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayStart() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetReplaySpectrumResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetReplaySpectrumResult() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetReplaySpectrumResult(context, request); }));
    }
    ~WithRawCallbackMethod_GetReplaySpectrumResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplaySpectrumResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetReplaySpectrumResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayStop() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayAdjust(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayTaskStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ZoomInOpen(context, request, response); }));
    }
    ~WithRawCallbackMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ZoomInOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ZoomInClose(context, request, response); }));
    }
    ~WithRawCallbackMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ZoomInClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldOpen(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldReset(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldClose(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataHoldClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DetectionOpen(context, request, response); }));
    }
    ~WithRawCallbackMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DetectionOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DetectionClose() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DetectionClose(context, request, response); }));
    }
    ~WithRawCallbackMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DetectionClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSignalDetailKeeping(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSignalDetailKeeping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartRecognise() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedStartRecognise(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartRecognise(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopRecognise() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedStopRecognise(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopRecognise(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeRecognise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeRecognise() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedChangeRecognise(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeRecognise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeRecognise(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeRecognise(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedReplayTaskStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayTaskStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::CreateReplayTaskRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStart() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStop() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::ReplayId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayAdjust(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayAdjust(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::AdjustRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayTaskStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayTaskStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedZoomInOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZoomInOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::ZoomInRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedZoomInClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZoomInClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::TaskAccount,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDetectionOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetectionOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::detection::DetectionRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DetectionClose() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDetectionClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetectionClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::TaskAccount,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedSetSignalDetailKeeping(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSignalDetailKeeping(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::detection::DetailKeepingRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartRecognise<WithStreamedUnaryMethod_StopRecognise<WithStreamedUnaryMethod_ChangeRecognise<WithStreamedUnaryMethod_ReplayTaskStart<WithStreamedUnaryMethod_ReplayStart<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<WithStreamedUnaryMethod_ReplayTaskStop<WithStreamedUnaryMethod_ZoomInOpen<WithStreamedUnaryMethod_ZoomInClose<WithStreamedUnaryMethod_DataHoldOpen<WithStreamedUnaryMethod_DataHoldReset<WithStreamedUnaryMethod_DataHoldClose<WithStreamedUnaryMethod_DetectionOpen<WithStreamedUnaryMethod_DetectionClose<WithStreamedUnaryMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRecogniseResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRecogniseResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIFAnalysis::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIFAnalysis::Result>* streamer) {
                       return this->StreamedGetRecogniseResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRecogniseResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRecogniseResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRecogniseResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhIFAnalysis::Result>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* streamer) {
                       return this->StreamedGetRealtimeStatus(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRealtimeStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest, ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest, ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* streamer) {
                       return this->StreamedReplayRecordQuery(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReplayRecordQuery(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest,::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetReplaySpectrumResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetReplaySpectrumResult() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhIFAnalysis::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhIFAnalysis::Result>* streamer) {
                       return this->StreamedGetReplaySpectrumResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetReplaySpectrumResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReplaySpectrumResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetReplaySpectrumResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::node::replay::ReplayId,::zb::dcts::node::zczh::zhIFAnalysis::Result>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetRecogniseResult<WithSplitStreamingMethod_GetRealtimeStatus<WithSplitStreamingMethod_ReplayRecordQuery<WithSplitStreamingMethod_GetReplaySpectrumResult<Service > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartRecognise<WithSplitStreamingMethod_GetRecogniseResult<WithStreamedUnaryMethod_StopRecognise<WithStreamedUnaryMethod_ChangeRecognise<WithSplitStreamingMethod_GetRealtimeStatus<WithStreamedUnaryMethod_ReplayTaskStart<WithSplitStreamingMethod_ReplayRecordQuery<WithStreamedUnaryMethod_ReplayStart<WithSplitStreamingMethod_GetReplaySpectrumResult<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<WithStreamedUnaryMethod_ReplayTaskStop<WithStreamedUnaryMethod_ZoomInOpen<WithStreamedUnaryMethod_ZoomInClose<WithStreamedUnaryMethod_DataHoldOpen<WithStreamedUnaryMethod_DataHoldReset<WithStreamedUnaryMethod_DataHoldClose<WithStreamedUnaryMethod_DetectionOpen<WithStreamedUnaryMethod_DetectionClose<WithStreamedUnaryMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace zhIFAnalysis
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_node_2fzczh_2fZhIFAnalysis_2eproto__INCLUDED
