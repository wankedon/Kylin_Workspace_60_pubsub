// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/nodeServer.proto
#ifndef GRPC_node_2fnodeServer_2eproto__INCLUDED
#define GRPC_node_2fnodeServer_2eproto__INCLUDED

#include "node/nodeServer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace node {
namespace server {

// 通用管理的API
class GeneralService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.node.server.GeneralService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::node::NodesInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodesInfo>> AsyncListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodesInfo>>(AsyncListAllNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodesInfo>> PrepareAsyncListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodesInfo>>(PrepareAsyncListAllNodesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::zb::dcts::node::NodeInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeInfo>> AsyncGetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeInfo>>(AsyncGetNodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeInfo>> PrepareAsyncGetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeInfo>>(PrepareAsyncGetNodeInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncPostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncPostNodeControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncPostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncPostNodeControlRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::zb::dcts::node::server::NodeControl* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::NodeControl>> AsyncGetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::NodeControl>>(AsyncGetNodeControlLastReplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::NodeControl>> PrepareAsyncGetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::NodeControl>>(PrepareAsyncGetNodeControlLastReplyRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::node::server::ServerTasksInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTasksInfo>> AsyncListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTasksInfo>>(AsyncListAllTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTasksInfo>> PrepareAsyncListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTasksInfo>>(PrepareAsyncListAllTasksRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::server::ServerTaskSummary* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTaskSummary>> AsyncGetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTaskSummary>>(AsyncGetTaskSumaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTaskSummary>> PrepareAsyncGetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTaskSummary>>(PrepareAsyncGetTaskSumaryRaw(context, request, cq));
    }
    virtual ::grpc::Status AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAbortOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAbortOneRaw(context, request, cq));
    }
    virtual ::grpc::Status AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAbortAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAbortAllRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodesInfo>* AsyncListAllNodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodesInfo>* PrepareAsyncListAllNodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeInfo>* AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeInfo>* PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncPostNodeControlRaw(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncPostNodeControlRaw(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::NodeControl>* AsyncGetNodeControlLastReplyRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::NodeControl>* PrepareAsyncGetNodeControlLastReplyRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTasksInfo>* AsyncListAllTasksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTasksInfo>* PrepareAsyncListAllTasksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTaskSummary>* AsyncGetTaskSumaryRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::server::ServerTaskSummary>* PrepareAsyncGetTaskSumaryRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::node::NodesInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodesInfo>> AsyncListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodesInfo>>(AsyncListAllNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodesInfo>> PrepareAsyncListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodesInfo>>(PrepareAsyncListAllNodesRaw(context, request, cq));
    }
    ::grpc::Status GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::zb::dcts::node::NodeInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeInfo>> AsyncGetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeInfo>>(AsyncGetNodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeInfo>> PrepareAsyncGetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeInfo>>(PrepareAsyncGetNodeInfoRaw(context, request, cq));
    }
    ::grpc::Status PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncPostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncPostNodeControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncPostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncPostNodeControlRaw(context, request, cq));
    }
    ::grpc::Status GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::zb::dcts::node::server::NodeControl* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::NodeControl>> AsyncGetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::NodeControl>>(AsyncGetNodeControlLastReplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::NodeControl>> PrepareAsyncGetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::NodeControl>>(PrepareAsyncGetNodeControlLastReplyRaw(context, request, cq));
    }
    ::grpc::Status ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::node::server::ServerTasksInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTasksInfo>> AsyncListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTasksInfo>>(AsyncListAllTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTasksInfo>> PrepareAsyncListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTasksInfo>>(PrepareAsyncListAllTasksRaw(context, request, cq));
    }
    ::grpc::Status GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::server::ServerTaskSummary* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTaskSummary>> AsyncGetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTaskSummary>>(AsyncGetTaskSumaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTaskSummary>> PrepareAsyncGetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTaskSummary>>(PrepareAsyncGetTaskSumaryRaw(context, request, cq));
    }
    ::grpc::Status AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAbortOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAbortOneRaw(context, request, cq));
    }
    ::grpc::Status AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAbortAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAbortAllRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response, std::function<void(::grpc::Status)>) override;
      void ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response, std::function<void(::grpc::Status)>) override;
      void GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response, std::function<void(::grpc::Status)>) override;
      void GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response, std::function<void(::grpc::Status)>) override;
      void ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response, std::function<void(::grpc::Status)>) override;
      void GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodesInfo>* AsyncListAllNodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodesInfo>* PrepareAsyncListAllNodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeInfo>* AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeInfo>* PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncPostNodeControlRaw(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncPostNodeControlRaw(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::NodeControl>* AsyncGetNodeControlLastReplyRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::NodeControl>* PrepareAsyncGetNodeControlLastReplyRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTasksInfo>* AsyncListAllTasksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTasksInfo>* PrepareAsyncListAllTasksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTaskSummary>* AsyncGetTaskSumaryRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTaskSummary>* PrepareAsyncGetTaskSumaryRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListAllNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodeInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_PostNodeControl_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodeControlLastReply_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAllTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTaskSumary_;
    const ::grpc::internal::RpcMethod rpcmethod_AbortOne_;
    const ::grpc::internal::RpcMethod rpcmethod_AbortAll_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListAllNodes(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response);
    virtual ::grpc::Status GetNodeInfo(::grpc::ServerContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response);
    virtual ::grpc::Status PostNodeControl(::grpc::ServerContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetNodeControlLastReply(::grpc::ServerContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response);
    virtual ::grpc::Status ListAllTasks(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response);
    virtual ::grpc::Status GetTaskSumary(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response);
    virtual ::grpc::Status AbortOne(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status AbortAll(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAllNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAllNodes() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListAllNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllNodes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::NodesInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllNodes(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodesInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeInfo(::grpc::ServerContext* context, ::zb::dcts::node::NodeId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostNodeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostNodeControl() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PostNodeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostNodeControl(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::server::NodeControl* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostNodeControl(::grpc::ServerContext* context, ::zb::dcts::node::server::NodeControl* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodeControlLastReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNodeControlLastReply() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetNodeControlLastReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeControlLastReply(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::server::NodeControl* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeControlLastReply(::grpc::ServerContext* context, ::zb::dcts::node::NodeId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::server::NodeControl>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAllTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAllTasks() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListAllTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllTasks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::server::ServerTasksInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllTasks(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::server::ServerTasksInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTaskSumary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTaskSumary() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTaskSumary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskSumary(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::server::ServerTaskSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskSumary(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::server::ServerTaskSummary>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AbortOne() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortOne(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AbortAll() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortAll(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListAllNodes<WithAsyncMethod_GetNodeInfo<WithAsyncMethod_PostNodeControl<WithAsyncMethod_GetNodeControlLastReply<WithAsyncMethod_ListAllTasks<WithAsyncMethod_GetTaskSumary<WithAsyncMethod_AbortOne<WithAsyncMethod_AbortAll<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListAllNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAllNodes() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::node::NodesInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response) { return this->ListAllNodes(context, request, response); }));}
    void SetMessageAllocatorFor_ListAllNodes(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::zb::dcts::node::NodesInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::node::NodesInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAllNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllNodes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::NodesInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAllNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::NodesInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::NodeId, ::zb::dcts::node::NodeInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response) { return this->GetNodeInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetNodeInfo(
        ::grpc::MessageAllocator< ::zb::dcts::node::NodeId, ::zb::dcts::node::NodeInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::NodeId, ::zb::dcts::node::NodeInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::NodeInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostNodeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostNodeControl() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::server::NodeControl, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response) { return this->PostNodeControl(context, request, response); }));}
    void SetMessageAllocatorFor_PostNodeControl(
        ::grpc::MessageAllocator< ::zb::dcts::node::server::NodeControl, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::server::NodeControl, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostNodeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostNodeControl(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::server::NodeControl* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostNodeControl(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::server::NodeControl* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNodeControlLastReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNodeControlLastReply() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::NodeId, ::zb::dcts::node::server::NodeControl>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response) { return this->GetNodeControlLastReply(context, request, response); }));}
    void SetMessageAllocatorFor_GetNodeControlLastReply(
        ::grpc::MessageAllocator< ::zb::dcts::node::NodeId, ::zb::dcts::node::server::NodeControl>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::NodeId, ::zb::dcts::node::server::NodeControl>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNodeControlLastReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeControlLastReply(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::server::NodeControl* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodeControlLastReply(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::server::NodeControl* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAllTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAllTasks() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::node::server::ServerTasksInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response) { return this->ListAllTasks(context, request, response); }));}
    void SetMessageAllocatorFor_ListAllTasks(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::zb::dcts::node::server::ServerTasksInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::node::server::ServerTasksInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAllTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllTasks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::server::ServerTasksInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAllTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::server::ServerTasksInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTaskSumary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTaskSumary() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::server::ServerTaskSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response) { return this->GetTaskSumary(context, request, response); }));}
    void SetMessageAllocatorFor_GetTaskSumary(
        ::grpc::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::server::ServerTaskSummary>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::server::ServerTaskSummary>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTaskSumary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskSumary(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::server::ServerTaskSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskSumary(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::server::ServerTaskSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AbortOne() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response) { return this->AbortOne(context, request, response); }));}
    void SetMessageAllocatorFor_AbortOne(
        ::grpc::MessageAllocator< ::zb::dcts::TaskId, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AbortOne(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AbortAll() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) { return this->AbortAll(context, request, response); }));}
    void SetMessageAllocatorFor_AbortAll(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AbortAll(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListAllNodes<WithCallbackMethod_GetNodeInfo<WithCallbackMethod_PostNodeControl<WithCallbackMethod_GetNodeControlLastReply<WithCallbackMethod_ListAllTasks<WithCallbackMethod_GetTaskSumary<WithCallbackMethod_AbortOne<WithCallbackMethod_AbortAll<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListAllNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAllNodes() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListAllNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllNodes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::NodesInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostNodeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostNodeControl() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PostNodeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostNodeControl(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::server::NodeControl* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNodeControlLastReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNodeControlLastReply() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetNodeControlLastReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeControlLastReply(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::server::NodeControl* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAllTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAllTasks() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListAllTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllTasks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::server::ServerTasksInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTaskSumary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTaskSumary() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTaskSumary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskSumary(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::server::ServerTaskSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AbortOne() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AbortAll() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAllNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAllNodes() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListAllNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllNodes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::NodesInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostNodeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostNodeControl() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PostNodeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostNodeControl(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::server::NodeControl* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostNodeControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodeControlLastReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNodeControlLastReply() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetNodeControlLastReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeControlLastReply(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::server::NodeControl* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeControlLastReply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAllTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAllTasks() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListAllTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllTasks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::server::ServerTasksInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTaskSumary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTaskSumary() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetTaskSumary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskSumary(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::server::ServerTaskSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskSumary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AbortOne() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortOne(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AbortAll() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAllNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAllNodes() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAllNodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAllNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllNodes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::NodesInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAllNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNodeInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostNodeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostNodeControl() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostNodeControl(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostNodeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostNodeControl(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::server::NodeControl* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostNodeControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNodeControlLastReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNodeControlLastReply() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNodeControlLastReply(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNodeControlLastReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeControlLastReply(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::server::NodeControl* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodeControlLastReply(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAllTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAllTasks() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAllTasks(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAllTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllTasks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::server::ServerTasksInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAllTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTaskSumary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTaskSumary() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTaskSumary(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTaskSumary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskSumary(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::server::ServerTaskSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskSumary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AbortOne() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AbortOne(context, request, response); }));
    }
    ~WithRawCallbackMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AbortOne(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AbortAll() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AbortAll(context, request, response); }));
    }
    ~WithRawCallbackMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AbortAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAllNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAllNodes() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::zb::dcts::node::NodesInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::zb::dcts::node::NodesInfo>* streamer) {
                       return this->StreamedListAllNodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAllNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAllNodes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::NodesInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAllNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::zb::dcts::node::NodesInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::NodeId, ::zb::dcts::node::NodeInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::NodeId, ::zb::dcts::node::NodeInfo>* streamer) {
                       return this->StreamedGetNodeInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNodeInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::NodeId,::zb::dcts::node::NodeInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostNodeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostNodeControl() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::server::NodeControl, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::server::NodeControl, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedPostNodeControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostNodeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostNodeControl(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::server::NodeControl* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostNodeControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::server::NodeControl,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNodeControlLastReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNodeControlLastReply() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::NodeId, ::zb::dcts::node::server::NodeControl>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::NodeId, ::zb::dcts::node::server::NodeControl>* streamer) {
                       return this->StreamedGetNodeControlLastReply(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNodeControlLastReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodeControlLastReply(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::NodeId* /*request*/, ::zb::dcts::node::server::NodeControl* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNodeControlLastReply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::NodeId,::zb::dcts::node::server::NodeControl>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAllTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAllTasks() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::zb::dcts::node::server::ServerTasksInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::zb::dcts::node::server::ServerTasksInfo>* streamer) {
                       return this->StreamedListAllTasks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAllTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAllTasks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::node::server::ServerTasksInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAllTasks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::zb::dcts::node::server::ServerTasksInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTaskSumary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTaskSumary() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::server::ServerTaskSummary>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::server::ServerTaskSummary>* streamer) {
                       return this->StreamedGetTaskSumary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTaskSumary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTaskSumary(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::server::ServerTaskSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTaskSumary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::server::ServerTaskSummary>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AbortOne() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAbortOne(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAbortOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AbortAll() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAbortAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAbortAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListAllNodes<WithStreamedUnaryMethod_GetNodeInfo<WithStreamedUnaryMethod_PostNodeControl<WithStreamedUnaryMethod_GetNodeControlLastReply<WithStreamedUnaryMethod_ListAllTasks<WithStreamedUnaryMethod_GetTaskSumary<WithStreamedUnaryMethod_AbortOne<WithStreamedUnaryMethod_AbortAll<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListAllNodes<WithStreamedUnaryMethod_GetNodeInfo<WithStreamedUnaryMethod_PostNodeControl<WithStreamedUnaryMethod_GetNodeControlLastReply<WithStreamedUnaryMethod_ListAllTasks<WithStreamedUnaryMethod_GetTaskSumary<WithStreamedUnaryMethod_AbortOne<WithStreamedUnaryMethod_AbortAll<Service > > > > > > > > StreamedService;
};

}  // namespace server
}  // namespace node
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_node_2fnodeServer_2eproto__INCLUDED
